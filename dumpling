#!/bin/bash

# Treat unset variable as error
set -u

#
# dumpling
#
# Rename of xfsBackup
#
# Robert Brockway
# March 2, 2020
#
# $1: Host
# $2: Filesystem mount point
# $3: Dump strategy
# $4: Backup directory
# $5: Filesystem type [We may autodetect this later]
# $6: Percentage capacity threshold to delete old backups (1-99)
# $7: Email address to report to (optional)
#

#
# Functions
#

error()
{
	case $1 in
	11)
		MESSAGE="Please specify system to be backed up."
		;;
	12)
		MESSAGE="Please specify filesystem to be backed up."
		;;
	13)
		MESSAGE="Please specify backup strategy."
		;;
	14)
		MESSAGE="Please specify mount base."
		;;
	15)
		MESSAGE="Please specify file system."
		;;
	18)
		MESSAGE="Please mount $BACKUPBASE."
		;;
	19)
		MESSAGE="Directory $BACKUPBASE exists but is not a directory."
		;;
	20)
		MESSAGE="Unable to create $DUMPBASE."
		;;
	21)
		MESSAGE="Directory $DUMPBASE exists but is not a directory."
		;;
	22)
		MESSAGE="Unable to create $FILESYSTEMBASE."
		;;
	23)
		MESSAGE="Directory $FILESYSTEMBASE exists but is not a directory."
		;;
	24)
		MESSAGE="Unable to create $RETIREDBASE."
		;;
	25)
		MESSAGE="Directory $RETIREDBASE exists but is not a directory."
		;;
	26)
		MESSAGE="Unable to create $RETIREDCURRENT."
		;;
	27)
		MESSAGE="Directory $RETIREDCURRENT exists but is not a directory."
		;;
	30)
		MESSAGE="The xfsdump utility is missing."
		;;
	31)
		MESSAGE="Unable to check if xfsdump utility is present on system $SYSTEMNAME."
		;;
	40)
		MESSAGE="The dump utility is missing."
		;;
	41)
		MESSAGE="Unable to check if dump utility is present on system $SYSTEMNAME."
		;;
	50)
		MESSAGE="Unable to change directory to $FILESYSTEMBASE."
		;;
	60)
		MESSAGE="Backup of $FILESYSTEM on $SYSTEMNAME at level $DUMPLEVEL failed."
		;;
	90)
		MESSAGE="Dump strategy hanoi not yet implemented."
		;;
	110)
		MESSAGE="Search of $HOSTSFILE failed."
		;;
	111)
		MESSAGE="Unable to retire backups for $BASEI."
		;;
	113)
		MESSAGE="Unknown dump strategy."
		;;
	115)
		MESSAGE="Unknown file system type."
		;;
	170)
		MESSAGE="Unable to remove empty directories."
		;;
	180)
		MESSAGE="Unable to compress .json files."
		;;
	*)
		MESSAGE="Unknown error."
		;;
	esac
	echo $MESSAGE
	logger $MESSAGE

	# $MAILTO is optional
	if [ -n $MAILTO ]
	then
		case ${FILESYSTEM-""} in
		"")
			echo $MESSAGE | mailx -s "BACKUP FAILED: $SYSTEMNAME" $MAILTO
			;;
		*)
			echo $MESSAGE | mailx -s "BACKUP FAILED: $SYSTEMNAME:$FILESYSTEM Level: $DUMPLEVEL" $MAILTO
			;;
		esac
	fi

	exit $1
}

extBackup()
{
	# We're not going anywhere without this
	ssh root@$SYSTEMNAME "which dump" &> /dev/null
	case $? in
	0)
		echo "Utility dump found"
		;;
	1)
		error 40
		;;
	*)
		error 41
		;;
	esac
        echo "Taking dump of $FILESYSTEMNAME on $SYSTEMNAME at level $DUMPLEVEL"

	filesystemNameConvert

        ssh root@$SYSTEMNAME "dump -${DUMPLEVEL}uf - $FILESYSTEM" > $SYSTEMNAME.$FILESYSTEMNAME.$TIMESTAMP.dump.$DUMPLEVEL 2> /dev/null
        BACKUPOUT=$?

	processBackupOut
}


filesystemBackup()
{
	case $FILESYSTEMTYPE in
	xfs)
		xfsBackup
		;;
	ext2|ext3|ext4)
		extBackup
		;;
	esac
}

filesystemNameConvert()
{
        case $FILESYSTEMNAME in
        root)
                FILESYSTEM="/"
                ;;
	fs1)
		FILESYSTEM="/srv/fs1"
		;;
	fs2)
		FILESYSTEM="/srv/fs2"
		;;
	fs3)
		FILESYSTEM="/srv/fs3"
		;;
        *)
                FILESYSTEM="/$FILESYSTEMNAME"
                ;;
        esac
}

initialiseFilesystemBase()
{
	FILESYSTEMBASE=$SYSTEMBASE/$FILESYSTEMNAME
	if [ ! -e $FILESYSTEMBASE ]
	then
		mkdir $FILESYSTEMBASE
		case $? in
		0)
			echo "Creating $FILESYSTEMBASE"
			;;
		*)
			error 22
			;;
		esac
	elif [ -d $FILESYSTEMBASE ]
	then
		echo "Directory $FILESYSTEMBASE available"
	else
		error 23
	fi
}

initialiseMountBase()
{
	# Used all over the place
	TIMESTAMP=$(date +%s)
	YEAR=$(date +%y)
	MONTH=$(date +%m)
	DAY=$(date +%d)
	DAYOFYEAR=$(date +%j)
	DAYOFMONTH=$(date +%e)
	DAYOFWEEK=$(date +%u)

	UNIQUEID=$TIMESTAMP.$$

	HOSTSFILE=/home/ansible/ansible/hosts

	if [ ! -e $BACKUPBASE ]
	then
		error 18
	elif [ -f $BACKUPBASE/config ]
	then
		echo "Directory $BACKUPBASE available"
	else
		error 19
	fi

	# Files older than this will always be removed if
	# file removal is activated
	MAXFILEAGE=400

	# files younger than this will never be removed
	MINFILEAGE=1
}

initialiseRetiredBase()
{

	RETIREDBASE=$BACKUPBASE/retired
	if [ ! -e $RETIREDBASE ]
	then
		mkdir $RETIREDBASE
		case $? in
		0)
			echo "Creating $RETIREDBASE"
			;;
		*)
			error 24
			;;
		esac
	elif [ -d  $RETIREDBASE ]
	then
		echo "Directory $RETIREDBASE available"
	else
		error 25
	fi
}

initialiseRetiredCurrent()
{
	RETIREDCURRENT=$BACKUPBASE/retired/$TIMESTAMP
	if [ ! -e $RETIREDCURRENT ]
	then
		mkdir -p $RETIREDCURRENT
		case $? in
		0)
			echo "Creating $RETIREDCURRENT"
			;;
		*)
			error 26
			;;
		esac
	elif [ -d  $RETIREDCURRENT ]
	then
		echo "Directory $RETIREDCURRENT available"
	else
		error 27
	fi
}

initialiseSystemBase()
{
	SYSTEMBASE=$DUMPBASE/$SYSTEMNAME
	if [ ! -e $SYSTEMBASE ]
	then
		mkdir $SYSTEMBASE
		case $? in
		0)
			echo "Creating $SYSTEMBASE"
			;;
		*)
			error 20
			;;
		esac
	elif [ -d  $SYSTEMBASE ]
	then
		echo "Directory $SYSTEMBASE available"
	else
		error 21
	fi
}

initialiseXFSBase()
{

	DUMPBASE=$BACKUPBASE/dumps
	if [ ! -e $DUMPBASE ]
	then
		mkdir $DUMPBASE
		case $? in
		0)
			echo "Creating $DUMPBASE"
			;;
		*)
			error 20
			;;
		esac
	elif [ -d  $DUMPBASE ]
	then
		echo "Directory $DUMPBASE available"
	else
		error 21
	fi

	RAWLOG=$DUMPBASE/rawlog
}

processBackupOut()
{
	case $BACKUPOUT in
	0)
		writeRawlog
		MESSAGE="Backup of $FILESYSTEM on $SYSTEMNAME at level $DUMPLEVEL successful."
		echo $MESSAGE
		logger $MESSAGE

		# $MAILTO is optional
		if [ -n $MAILTO ]
		then
			echo $MESSAGE | mailx -s "Backup Successful: $SYSTEMNAME:$FILESYSTEM Level: $DUMPLEVEL" $MAILTO
		fi
		;;
	*)
		error 60
		;;
	esac
}

removeEmptyDirectories()
{
	echo "Removing empty directories"
	find $DUMPBASE -type d -mmin +60 -empty -delete
	case $? in
	0)
		true
		;;
	*)
		error 170
		;;
	esac
}

removeOldBackups()
{
	HOWFULL=$(df $BACKUPBASE | awk '/[0-9]%/{print $(NF-1)}' | sed s/%//)

	# 00 is less then $TOOFULL so we need to fix this
	if [ $HOWFULL -eq 00 ]
	then
		HOWFULL=99
	fi

	if [ $(($HOWFULL)) -ge $(($TOOFULL)) ]
	then
		for I in $(seq $MAXFILEAGE -1 $MINFILEAGE)
		do
			find $DUMPBASE -type f -mtime +$I -delete
		done
	fi
}

retireOldBackups()
{
	echo "Checking for old backups to retire"
	for I in $DUMPBASE/*
	do
		BASEI=$(basename $I)
		grep $BASEI $HOSTSFILE &> /dev/null
		case $? in
		0)
			# Silently accept matches
			true
			;;
		1)
			echo "Retiring backups for $BASEI"
			mv $I $RETIREDCURRENT
			case $?
			in
			0)
				echo "Backups for $BASEI successfully retired"
				;;
			*)
				error 111
				;;
			esac
			;;
		*)
			error 110
			;;
		esac
			
	done
}

setDir()
{
	cd $1
	case $? in
	0)
		echo "Backing up to $1"
		;;
	*)
		error 50
		;;
	esac
}

setDumpLevel()
{
	case $DUMPSTRATEGY in
	annual)
		setDumpLevelAnnual
		;;
	daily)
		setDumpLevelDaily
		;;
	hanoi)
		setDumpLevelHanoi
		;;
	monthly)
		setDumpLevelMonthly
		;;
	smart)
		setDumpLevelSmart
		;;
	weekly)
		setDumpLevelWeekly
		;;
	esac
}

setDumpLevelAnnual()
{
        # Do we have a full dump?
        # If not make one
        FULLDUMPCONT=$(ls *dump.0 2> /dev/null | wc -w)
        case $FULLDUMPCONT in
        0)
                DUMPLEVEL=0
                ;;
        *)
                DAYLEVEL0=$(( $(hostname | tr . 0 | tr a-z 0-9 ) % 365 ))
                DAYLEVEL1=$(( $(hostname | tr . 0 | tr a-z 0-9 ) % 28 ))

                if [ $DAYOFYEAR -eq $DAYLEVEL0 ]
                then
                        DUMPLEVEL=0
                elif [ $DAYOFMONTH -eq  $DAYLEVEL1 ]
                then
                        DUMPLEVEL=1
                else
                        # Results in a number between 2 and 8 inclusive
                        # which fits nicely in to the dump levels.
                        # Level 9 is still available for any last minute dumps.
                        DUMPLEVEL=$(($DAYOFWEEK + 1))
                fi
                ;;
        esac

	echo "Dump level set to be $DUMPLEVEL"
}

setDumpLevelDaily()
{
	# Every day is full dump day!
	DUMPLEVEL=0

	echo "Dump level set to be $DUMPLEVEL"
}

setDumpLevelHanoi()
{
	error 90
}

setDumpLevelMonthly()
{
        # Do we have a full dump?
        # If not make one
        FULLDUMPCONT=$(ls *dump.0 2> /dev/null | wc -w)
        case $FULLDUMPCONT in
        0)
                DUMPLEVEL=0
                ;;
        *)
                DAYLEVEL0=$(( $(hostname | tr . 0 | tr a-z 0-9 ) % 365 ))
                DAYLEVEL1=$(( $(hostname | tr . 0 | tr a-z 0-9 ) % 28 ))

                if [ $DAYOFMONTH -eq  $DAYLEVEL1 ]
                then
                        DUMPLEVEL=0
                else
                        # Results in a number between 2 and 8 inclusive
                        # which fits nicely in to the dump levels.
                        # Level 9 is still available for any last minute dumps.
                        DUMPLEVEL=$(($DAYOFWEEK + 1))
                fi
                ;;
        esac

	echo "Dump level set to be $DUMPLEVEL"
}

setDumpLevelSmart()
{
	# It's not that smart yet.
	# It will only do a level 0 if one is absent.
	# A second run on a single day should be level 8

        # Do we have a full dump?
        # If not make one
        FULLDUMPCONT=$(ls *dump.0 2> /dev/null | wc -w)
        case $FULLDUMPCONT in
        0)
                DUMPLEVEL=0
                ;;
        *)
                # Results in a number between 2 and 8 inclusive
                # which fits nicely in to the dump levels.
                # Level 9 is still available for any last minute dumps.
                DUMPLEVEL=$(($DAYOFWEEK + 1))
                ;;
        esac

	echo "Dump level set to be $DUMPLEVEL"
}

setDumpLevelWeekly()
{
        # Do we have a full dump?
        # If not make one
        FULLDUMPCONT=$(ls *dump.0 2> /dev/null | wc -w)
        case $FULLDUMPCONT in
        0)
                DUMPLEVEL=0
                ;;
        *)
                # Results in a number between 0 and 6 inclusive
                DUMPLEVEL=$(($DAYOFWEEK - 1))
                ;;
        esac

	echo "Dump level set to be $DUMPLEVEL"
}

writeRawlog()
{
        echo "$TIMESTAMP,$SYSTEMNAME,$FILESYSTEMNAME,$DUMPLEVEL,$BACKUPOUT,$FILESYSTEMTYPE" >> $RAWLOG
}

xfsBackup()
{
	# We're not going anywhere without this
	ssh root@$SYSTEMNAME "which xfsdump" &> /dev/null
	case $? in
	0)
		echo "Utility xfsdump found"
		;;
	1)
		error 30
		;;
	*)
		error 31
		;;
	esac
        echo "Taking xfsdump of $FILESYSTEMNAME on $SYSTEMNAME at level $DUMPLEVEL"

	filesystemNameConvert
	
        ssh root@$SYSTEMNAME "xfsdump -M $FILESYSTEMNAME -L $SYSTEMNAME -l $DUMPLEVEL - $FILESYSTEM" > $SYSTEMNAME.$FILESYSTEMNAME.$TIMESTAMP.xfsdump.$DUMPLEVEL 2> /dev/null
        BACKUPOUT=$?

	processBackupOut
}

#
# Main
#

case ${1-""} in
"")
	error 11
	;;
*)
	SYSTEMNAME=$1
	;;
esac

case ${2-""} in
"")
	error 12
	;;
*)
	FILESYSTEMNAME=$2
	;;
esac

case ${3-""} in
"")
	error 13
	;;
annual|daily|monthly|smart|weekly|hanoi)
	DUMPSTRATEGY=$3
	;;
*)
	error 113
	;;
esac

case ${4-""} in
"")
	error 14
	;;
*)
	BACKUPBASE=$4
	;;
esac

case ${5-""} in
"")
	error 15
	;;
ext2|ext3|ext4|xfs)
	FILESYSTEMTYPE=$5
	;;
*)
	error 115
	;;
esac

case ${6-""} in
"")
	TOOFULL=90
	;;
*)
	TOOFULL=$6
	;;
esac

case ${7-""} in
"")
	true
	;;
*)
	MAILTO=$7
	echo $MAILTO
	;;
esac

initialiseMountBase
initialiseXFSBase
initialiseSystemBase
initialiseFilesystemBase
#initialiseRetiredBase
#initialiseRetiredCurrent

removeOldBackups
setDir $FILESYSTEMBASE
setDumpLevel
filesystemBackup
removeEmptyDirectories
